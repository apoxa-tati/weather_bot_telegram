import asyncio
from datetime import datetime
import logging
import os

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from dotenv import load_dotenv
from flask import Flask
import requests


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TG_KEY = os.getenv("TG_KEY")
API_KEY = os.getenv("API_KEY")
PORT = int(os.getenv("PORT", 443))

if not TG_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TG_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TG_KEY, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_CITY = "Saint Petersburg"


def get_weather(city: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    try:
        params = {
            "q": city,
            "appid": API_KEY,
            "units": "metric",
            "lang": "ru",
        }

        response = requests.get(
            "https://api.openweathermap.org/data/2.5/weather", params=params
        )
        response.raise_for_status()
        data = response.json()

        weather_info = f"üå§ <b>–ü–æ–≥–æ–¥–∞ –≤ {city}</b>\n\n"
        weather_info += (
            f"‚Ä¢ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {data['weather'][0]['description'].capitalize()}\n"
        )
        weather_info += f"‚Ä¢ <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {data['main']['temp']} ¬∞C\n"
        weather_info += f"‚Ä¢ <b>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:</b> {data['main']['feels_like']} ¬∞C\n"
        weather_info += f"‚Ä¢ <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {data['main']['humidity']}%\n"
        weather_info += f"‚Ä¢ <b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {data['main']['pressure']} –≥–ü–∞\n"
        weather_info += f"‚Ä¢ <b>–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:</b> {data['wind']['speed']} –º/—Å\n"

        # –í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞
        sunset_timestamp = data["sys"]["sunset"]
        sunset_time = datetime.fromtimestamp(sunset_timestamp).strftime("%H:%M:%S")
        weather_info += f"‚Ä¢ <b>–ó–∞–∫–∞—Ç:</b> {sunset_time}\n"

        return weather_info

    except requests.exceptions.HTTPError as e:
        if response.status_code == 404:
            return f"‚ùå –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è."
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üå§ –ü–æ–≥–æ–¥–∞ –≤ –°–ü–±"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
            [KeyboardButton(text="üèô –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")],
        ],
        resize_keyboard=True,
    )
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Weather Bot!</b>\n\n"
        "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –º–∏—Ä–∞.\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "‚Ä¢ /help - –ø–æ–º–æ—â—å\n"
        "‚Ä¢ /weather <–≥–æ—Ä–æ–¥> - –ø–æ–≥–æ–¥–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "‚Ä¢ /city <–≥–æ—Ä–æ–¥> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n"
        "<b>–ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏:</b>\n"
        "‚Ä¢ –ü–æ–≥–æ–¥–∞ –≤ –°–ü–± - —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞\n"
        "‚Ä¢ –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥"
    )
    await message.answer(welcome_text, reply_markup=get_main_keyboard())
    weather_info = get_weather(DEFAULT_CITY)
    await message.answer(weather_info)


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üìñ <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "‚Ä¢ /weather <–≥–æ—Ä–æ–¥> - –ø–æ–≥–æ–¥–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "‚Ä¢ /city <–≥–æ—Ä–æ–¥> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "<code>/weather Moscow</code> - –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ\n"
        "<code>/city London</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –õ–æ–Ω–¥–æ–Ω –≥–æ—Ä–æ–¥–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    )
    await message.answer(help_text)


@dp.message(Command("weather"))
async def cmd_weather(message: types.Message):
    command_parts = message.text.split()
    if len(command_parts) < 2:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n<b>–ü—Ä–∏–º–µ—Ä:</b> <code>/weather Moscow</code>"
        )
        return
    city = " ".join(command_parts[1:])
    await message.answer(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è {city}...")
    weather_info = get_weather(city)
    await message.answer(weather_info)


@dp.message(Command("city"))
async def cmd_city(message: types.Message):
    command_parts = message.text.split()
    if len(command_parts) < 2:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n<b>–ü—Ä–∏–º–µ—Ä:</b> <code>/city London</code>"
        )
        return
    city = " ".join(command_parts[1:])
    weather_info = get_weather(city)
    if weather_info.startswith("‚ùå"):
        await message.answer(weather_info)
    else:
        global DEFAULT_CITY
        DEFAULT_CITY = city
        await message.answer(
            f"‚úÖ –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{city}</b>\n\n{weather_info}"
        )


@dp.message(F.text == "üå§ –ü–æ–≥–æ–¥–∞ –≤ –°–ü–±")
async def weather_spb(message: types.Message):
    await message.answer("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ...")
    weather_info = get_weather("Saint Petersburg")
    await message.answer(weather_info)


@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_button(message: types.Message):
    await cmd_help(message)


@dp.message(F.text == "üèô –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
async def change_city_button(message: types.Message):
    await message.answer(
        "üèô –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n<code>/city &lt;–≥–æ—Ä–æ–¥&gt;</code>"
    )


@dp.message(F.text)
async def handle_city_input(message: types.Message):
    text = message.text.strip()
    if text not in [
        "üå§ –ü–æ–≥–æ–¥–∞ –≤ –°–ü–±",
        "‚ùì –ü–æ–º–æ—â—å",
        "üèô –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥",
    ] and not text.startswith("/"):
        await message.answer(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è {text}...")
        weather_info = get_weather(text)
        await message.answer(weather_info)


# Flask –º–∞—Ä—à—Ä—É—Ç—ã
@app.route("/")
def home():
    return {"status": "Bot is running", "service": "Weather Telegram Bot"}


@app.route("/health")
def health():
    return {"status": "healthy"}


@app.route("/ping")
def ping():
    return "pong"


async def start_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    try:
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º event loop"""
    asyncio.run(start_bot())


if __name__ == "__main__":
    # –ó–ê–ü–£–°–ö–ê–ï–ú –ë–û–¢–ê –í –û–°–ù–û–í–ù–û–ú –ü–û–¢–û–ö–ï, –∞ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º
    from threading import Thread
    import time

    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    time.sleep(2)

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∫–∞–∫ –¥–µ–º–æ–Ω–∞
    flask_thread = Thread(
        target=lambda: app.run(
            host="0.0.0.0", port=PORT, debug=False, use_reloader=False
        )
    )
    flask_thread.daemon = True
    flask_thread.start()

    logger.info(f"Flask –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT} –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    run_bot()
